!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BSZ	Unit5/mem.c	/^#define BSZ /;"	d	file:
DIR_MODE	include/apue.h	/^#define DIR_MODE /;"	d
FILE_MODE	include/apue.h	/^#define FILE_MODE /;"	d
FTW_D	Unit4/dirtree.c	/^#define FTW_D /;"	d	file:
FTW_DNR	Unit4/dirtree.c	/^#define FTW_DNR /;"	d	file:
FTW_F	Unit4/dirtree.c	/^#define FTW_F /;"	d	file:
FTW_NS	Unit4/dirtree.c	/^#define FTW_NS /;"	d	file:
MAXLINE	include/apue.h	/^#define MAXLINE /;"	d
MEM_MAX	include/apue.h	/^#define MEM_MAX /;"	d
Myfunc	Unit4/dirtree.c	/^typedef int Myfunc(const char *, const struct stat *, int);$/;"	t	file:
OPEN_MAX_GUESEE	include/unit2.c	/^#define OPEN_MAX_GUESEE /;"	d	file:
PATHMAX_GUESS	include/unit2.c	/^#define PATHMAX_GUESS /;"	d	file:
PATH_MAX	include/apue.h	/^#define PATH_MAX /;"	d
Sigfunc	include/apue.h	/^typedef void Sigfunc(int); \/* for signal handlers *\/$/;"	t
_APUE_H	include/apue.h	/^#define _APUE_H$/;"	d
_POSIX_C_SOURCE	include/apue.h	/^#define _POSIX_C_SOURCE /;"	d
_XOPEN_SOURCE	include/apue.h	/^#define _XOPEN_SOURCE /;"	d
_base_pad	Unit5/IOBufInfo.c	/^#define _base_pad /;"	d	file:
_flag_pad	Unit5/IOBufInfo.c	/^#define _flag_pad /;"	d	file:
_ptr_pad	Unit5/IOBufInfo.c	/^#define _ptr_pad /;"	d	file:
buf	Unit8/fork.c	/^const char buf[] = "a write to stdout\\n";$/;"	v
buf	Unit8/vfork.c	/^const char buf[] = "a write to stdout\\n";$/;"	v
buf1	Unit3/creatholefile.c	/^const char buf1[] = "abcdefghij";$/;"	v
buf2	Unit3/creatholefile.c	/^const char buf2[] = "ABCDEFGHIJ";$/;"	v
buffersize	Unit5/IOBufInfo.c	/^int buffersize(fp) { return (fp->_IO_buf_end - fp->_IO_buf_base); }$/;"	f
buffersize	Unit5/IOBufInfo.c	/^int buffersize(fp) { return (fp->_bf._size); }$/;"	f
buffersize	Unit5/IOBufInfo.c	/^int buffersize(fp) {$/;"	f
clr_fl	include/unit3.c	/^void clr_fl(int fd, int falgs) {$/;"	f
doit	Unit7/ulimit.c	/^#define doit(/;"	d	file:
dopath	Unit4/dirtree.c	/^static int dopath(Myfunc *func) {$/;"	f	file:
env_init	Unit8/exec.c	/^char *env_init[] = {"USER=unknown", "PATH=\/tmp", NULL};$/;"	v
err_cont	include/error.c	/^void err_cont(int error, const char *fmt, ...) {$/;"	f
err_doit	include/error.c	/^static void err_doit(int errflag, int error, const char *fmt, va_list ap) {$/;"	f	file:
err_dump	include/error.c	/^void err_dump(const char *fmt, ...) {$/;"	f
err_exit	include/error.c	/^void err_exit(int error, const char *fmt, ...) {$/;"	f
err_msg	include/error.c	/^void err_msg(const char *fmt, ...) {$/;"	f
err_quit	include/error.c	/^void err_quit(const char *fmt, ...) {$/;"	f
err_ret	include/error.c	/^void err_ret(const char *fmt, ...) {$/;"	f
err_sys	include/error.c	/^void err_sys(const char *fmt, ...) {$/;"	f
f1	Unit7/longjump.c	/^static void f1(int a, int b, int c, int d) {$/;"	f	file:
f2	Unit7/longjump.c	/^static void f2(void) { longjmp(jumpbuffer, 1); }$/;"	f	file:
fullpath	Unit4/dirtree.c	/^static char *fullpath; \/* contains full pathname for every file. *\/$/;"	v	file:
getpwnam	Unit6/getpwnam.c	/^struct passwd *getpwnam(const char *name) {$/;"	f
globval	Unit7/longjump.c	/^static int globval;$/;"	v	file:
globval	Unit8/fork.c	/^int globval = 6;$/;"	v
globval	Unit8/vfork.c	/^int globval = 6;$/;"	v
is_linebuffered	Unit5/IOBufInfo.c	/^int is_linebuffered(fp) { return (fp->_flags & _IOLBF); }$/;"	f
is_linebuffered	Unit5/IOBufInfo.c	/^int is_linebuffered(fp) { return (fp->_flags & _IO_LINE_BUF); }$/;"	f
is_linebuffered	Unit5/IOBufInfo.c	/^int is_linebuffered(fp) { return (fp->_flags & _SLBF); }$/;"	f
is_read_lockable	include/apue.h	/^#define is_read_lockable(/;"	d
is_unbuffered	Unit5/IOBufInfo.c	/^int is_unbuffered(fp) { return (fp->_flags & _IONBF); }$/;"	f
is_unbuffered	Unit5/IOBufInfo.c	/^int is_unbuffered(fp) { return (fp->_flags & _IO_UNBUFFERED); }$/;"	f
is_unbuffered	Unit5/IOBufInfo.c	/^int is_unbuffered(fp) { return (fp->_flags & __SNBF); }$/;"	f
is_write_lockable	include/apue.h	/^#define is_write_lockable(/;"	d
jumpbuffer	Unit7/longjump.c	/^static jmp_buf jumpbuffer;$/;"	v	file:
log_doit	include/errlog.c	/^static void log_doit(int errorflages, int error, int priority, const char *fmt,$/;"	f	file:
log_exit	include/errlog.c	/^void log_exit(int error, const char *fmt, ...) {$/;"	f
log_msg	include/errlog.c	/^void log_msg(const char *fmt, ...) {$/;"	f
log_open	include/errlog.c	/^void log_open(const char *ident, int option, int facility) {$/;"	f
log_quit	include/errlog.c	/^void log_quit(const char *fmt, ...) {$/;"	f
log_ret	include/errlog.c	/^void log_ret(const char *fmt, ...) {$/;"	f
log_sys	include/errlog.c	/^void log_sys(const char *fmt, ...) {$/;"	f
main	Unit1/basic.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit3/copyfile.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit3/creatholefile.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit3/fileflages.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit4/dirtree.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit4/filetype.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit5/IOBufInfo.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit5/mem.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit6/strftime.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit7/atexit.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit7/longjump.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit7/ulimit.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit8/echoall.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit8/exec.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit8/exit.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit8/fork.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit8/tiwce_fork.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	Unit8/vfork.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	fork.c	/^int main(int argc, char const *argv[]) {$/;"	f
main	include/errlog.c	/^int main(int argc, char const *argv[]) { return 0; }$/;"	f
main	include/error.c	/^int main(int argc, char const *argv[]) { return 0; }$/;"	f
main	include/unit2.c	/^int main(int argc, char const *argv[]) { return 0; }$/;"	f
max	include/apue.h	/^#define max(/;"	d
min	include/apue.h	/^#define min(/;"	d
mychario	Unit1/basic.c	/^void mychario() {$/;"	f
myexit1	Unit7/atexit.c	/^static void myexit1() { printf("first 1"); }$/;"	f	file:
myexit2	Unit7/atexit.c	/^static void myexit2() { printf("first "); }$/;"	f	file:
myftw	Unit4/dirtree.c	/^static myftw(char *pathname,$/;"	f	file:
myfunc	Unit4/dirtree.c	/^static Myfunc myfunc;$/;"	v	file:
myfunc	Unit4/dirtree.c	/^static int myfunc(const cahr *pathname, const struct stat *statptr, int types) {$/;"	f	file:
myls	Unit1/basic.c	/^void myls(int count, const char *directory) {$/;"	f
myshell	Unit1/basic.c	/^void myshell() {$/;"	f
mystdio	Unit1/basic.c	/^void mystdio() {$/;"	f
nblk	Unit4/dirtree.c	/^static long nreg, ndir, nblk, nchr, nfifo, nslink, nsock, ntot;$/;"	v	file:
nchr	Unit4/dirtree.c	/^static long nreg, ndir, nblk, nchr, nfifo, nslink, nsock, ntot;$/;"	v	file:
ndir	Unit4/dirtree.c	/^static long nreg, ndir, nblk, nchr, nfifo, nslink, nsock, ntot;$/;"	v	file:
nfifo	Unit4/dirtree.c	/^static long nreg, ndir, nblk, nchr, nfifo, nslink, nsock, ntot;$/;"	v	file:
nreg	Unit4/dirtree.c	/^static long nreg, ndir, nblk, nchr, nfifo, nslink, nsock, ntot;$/;"	v	file:
nslink	Unit4/dirtree.c	/^static long nreg, ndir, nblk, nchr, nfifo, nslink, nsock, ntot;$/;"	v	file:
nsock	Unit4/dirtree.c	/^static long nreg, ndir, nblk, nchr, nfifo, nslink, nsock, ntot;$/;"	v	file:
ntot	Unit4/dirtree.c	/^static long nreg, ndir, nblk, nchr, nfifo, nslink, nsock, ntot;$/;"	v	file:
open_max	include/unit2.c	/^long open_max(void) {$/;"	f
openmax	include/unit2.c	/^static long openmax = 0;$/;"	v	file:
openmax	include/unit2.c	/^static long openmax = OPEN_MAX;$/;"	v	file:
path_alloc	include/unit2.c	/^char *path_alloc(size_t *sizep) {$/;"	f
pathlen	Unit4/dirtree.c	/^static size_t pathlen = 32;$/;"	v	file:
pathmax	include/unit2.c	/^static long pathmax = 0;$/;"	v	file:
pathmax	include/unit2.c	/^static long pathmax = PATH_MAX;$/;"	v	file:
posix_version	include/unit2.c	/^static long posix_version = 0;$/;"	v	file:
pr_exit	include/unit8.c	/^void pr_exit(int status) {$/;"	f
pr_limits	Unit7/ulimit.c	/^static void pr_limits(char *name, int resource) {$/;"	f	file:
pr_stdio	Unit5/IOBufInfo.c	/^void pr_stdio(const char *name, FILE *fp) {$/;"	f
read_lock	include/apue.h	/^#define read_lock(/;"	d
readw_lock	include/apue.h	/^#define readw_lock(/;"	d
set_fl	include/unit3.c	/^void set_fl(int fd, int falgs) {$/;"	f
sig_int	Unit1/basic.c	/^static void sig_int(int signo) { printf("interrupte.\\n%%"); }$/;"	f	file:
un_lock	include/apue.h	/^#define un_lock(/;"	d
write_lock	include/apue.h	/^#define write_lock(/;"	d
writew_lock	include/apue.h	/^#define writew_lock(/;"	d
xsi_version	include/unit2.c	/^static long xsi_version = 0;$/;"	v	file:
